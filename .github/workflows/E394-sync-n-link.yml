name: E394 - Sync Fork and check link

on:
  schedule:
    - cron: '0 0 * * *' 
  workflow_dispatch:

env:
  GH_PAT: ${{ secrets.EXTERNAL_REPO_PAT }}
  DEFAULT_BRANCH: main

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.EXTERNAL_REPO_PAT }}
          fetch-depth: 0
         
      - name: Configure Git user
        run: |
        
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Get upstream repository name dynamically
        id: upstream
        run: |
        
          echo "üì° Recupero info sul repository..."
          API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}"
          
          RESPONSE=$(curl -s -H "Authorization: token $GH_PAT" $API_URL)
          PARENT_FULL_NAME=$(echo "$RESPONSE" | jq -r '.parent.full_name // empty')
          if [[ -z "$PARENT_FULL_NAME" ]]; then
            echo "‚ùå Questa repository non √® un fork oppure il token non ha accesso all'upstream."
            exit 1
          fi
          echo "‚úÖ Upstream rilevato: $PARENT_FULL_NAME"
          echo "UPSTREAM_REPO=$PARENT_FULL_NAME" >> "$GITHUB_ENV"
        
      - name: Sync with upstream
        run: |
        
          echo "üîÑ Sincronizzazione con $UPSTREAM_REPO..."
          UPSTREAM_URL="https://${GH_PAT}@github.com/${UPSTREAM_REPO}.git"
        
          git remote add upstream "$UPSTREAM_URL" || git remote set-url upstream "$UPSTREAM_URL"
          git fetch upstream
        
          # Verifica se ci sono differenze
          if git diff --quiet HEAD upstream/${DEFAULT_BRANCH}; then
            echo "‚úÖ Il fork √® gi√† aggiornato"
            exit 0
          fi
          
          echo "üìù Rilevate differenze, tentativo di rebase..."
        
          # File da proteggere in caso di fallimento rebase
          PROTECTED_FILES=(
            ".github/workflows/E394-sync-n-link.yml"
            # Aggiungi altri file che vuoi proteggere
          )
          
          # Tenta il rebase
          if git rebase upstream/${DEFAULT_BRANCH}; then
            echo "‚úÖ Rebase completato con successo"
          else
            echo "‚ö†Ô∏è Rebase fallito - usando strategia reset + restore"
            git rebase --abort
        
            # Salva i file protetti
            echo "üõ°Ô∏è Salvando file protetti..."
            mkdir -p /tmp/protected
            for file in "${PROTECTED_FILES[@]}"; do
              if [[ -f "$file" ]]; then
                mkdir -p "/tmp/protected/$(dirname "$file")"
                cp "$file" "/tmp/protected/$file"
                echo "  ‚úÖ Salvato: $file"
              fi
            done
        
            # Reset hard a upstream (copia tutto)
            echo "üîÑ Reset hard a upstream..."
            git reset --hard upstream/${DEFAULT_BRANCH}
            
            # Ripristina i file protetti
            echo "üîÑ Ripristinando file protetti..."
            CHANGES_MADE=false
            for file in "${PROTECTED_FILES[@]}"; do
              if [[ -f "/tmp/protected/$file" ]]; then
                mkdir -p "$(dirname "$file")"
                cp "/tmp/protected/$file" "$file"
                git add "$file"
                CHANGES_MADE=true
                echo "  ‚úÖ Ripristinato: $file"
              fi
            done
       
            # Committa i file ripristinati se necessario
            if [[ "$CHANGES_MADE" == "true" ]]; then
              if ! git diff --staged --quiet; then
                git commit -m "Restore protected files after upstream sync"
                echo "‚úÖ File protetti ripristinati"
              fi
            fi
          fi
          
      - name: Push changes to fork
        run: |
          echo "üì§ Pushing aggiornamenti al fork..."
          git push origin ${DEFAULT_BRANCH} --force-with-lease
          
      - name: Fix repository links after sync
        run: |
          echo "üîß Controllo e correzione link nei file dopo il sync..."
          
          # File da controllare
          FILES_TO_CHECK=(
            "Dockerfile"
        
          )
          
          # Link problematici da cercare e sostituire
          PROBLEMATIC_PATTERNS=(
            "https://github.com/YourUsername/YourRepoName"
            "https://github.com/YOUR_USERNAME/YOUR_REPO"
            "https://github.com/username/repository"
            "https://github.com/user/repo"
            "git@github.com:YourUsername/YourRepoName"
            "git@github.com:YOUR_USERNAME/YOUR_REPO"
          )
          
          # Se √® un fork, aggiungi anche il link upstream
          if [[ -n "$UPSTREAM_REPO" ]]; then
            PROBLEMATIC_PATTERNS+=(
              "https://github.com/$UPSTREAM_REPO"
              "git@github.com:$UPSTREAM_REPO"
            )
          fi
          
          LINKS_FIXED=false
          
          for file in "${FILES_TO_CHECK[@]}"; do
            if [[ -f "$file" ]]; then
              echo "üìÑ Controllando: $file"
              
              # Per ogni pattern problematico
              for pattern in "${PROBLEMATIC_PATTERNS[@]}"; do
                if grep -q "$pattern" "$file" 2>/dev/null; then
                  echo "  ‚ö†Ô∏è Trovato link problematico: $pattern"
                  
                  # Sostituisci con il link corretto
                  if [[ "$pattern" == *"git@github.com"* ]]; then
                    sed -i "s|$pattern|git@github.com:${GITHUB_REPOSITORY}|g" "$file"
                    echo "  ‚úÖ Sostituito con: git@github.com:${GITHUB_REPOSITORY}"
                  else
                    sed -i "s|$pattern|https://github.com/${GITHUB_REPOSITORY}|g" "$file"
                    echo "  ‚úÖ Sostituito con: https://github.com/${GITHUB_REPOSITORY}"
                  fi
                  
                  LINKS_FIXED=true
                fi
              done
            fi
          done
          
          # Se ci sono stati cambiamenti, committa
          if [[ "$LINKS_FIXED" == "true" ]]; then
            if ! git diff --quiet; then
              echo "üìù Committando correzioni link..."
              git add .
              git commit -m "üîß Fix repository links after sync

              - Fixed placeholder URLs (YourUsername/YourRepoName)
              - Updated upstream links to point to fork
              - Auto-corrected after upstream sync"
              
              git push origin ${DEFAULT_BRANCH}
              echo "‚úÖ Link repository corretti!"
            fi
          else
            echo "‚úÖ Nessun link problematico trovato"
          fi
